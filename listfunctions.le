; Some examples of simple list functions

; take left component of a pair (or first element of a list)
(fun #L ((L . R)) L)

; take right component of a pair (or the tail of a list)
(fun #R ((L . R)) R)

; take second element of a list
(fun #2 ((_1 _2 . rest)) _2)

; make a list of all arguments
(fun list l l)

; return the length of a list
(fun length
  (())       0
  ((a . as)) (+ 1 (length as)))

; append two lists
(fun append
   (()       bs) bs
   ((a . as) bs) (:: a (append as bs)))

; reverse a list
(fun reverse
  (as)          (reverse as ())
  (()       bs) bs
  ((a . as) bs) (reverse as (:: a bs)))

; map function
(fun map
  (f ()) ()
  (f (a . as)) (:: (f a) (map f as)))

; equality test
(fun equal (x x) 'T (x y) ())

; variadic equality test
(fun Equal
  (x) 'T
  (x x . rest) (apply Equal (:: x rest))
  otherwise ())

; ordered test
(fun orderedBy (op list) (apply op list))